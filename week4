//CComplex.cpp
#include "stdafx.h"
#include "CComplex.h"
#include <iostream>

CComplex::CComplex(double x, double y) :x(x), y(y) {
}

CComplex::~CComplex() {
	//std::cout << x << "+" << y << "i was destroyed. \n";
}

int CComplex::setX(double x) {
	this->x = x;
	return 0;
}

int CComplex::setY(double y) {
	this->y = y;
	return 0;
}

double CComplex::getX() const {
	return x;
}

double CComplex::getY() const {
	return y;
}

int CComplex::print() const {
	std::cout << x << "+" << y << "i";
	return 0;
}

int CComplex::read() {
	std::cout << "Enter real part:";
	std::cin >> x;
	std::cout << "Enter img part: ";
	std::cin >> y;
	return 0;
}

CComplex CComplex::add(const CComplex & r) const {
	return CComplex(x + r.x, y + r.y);

}

CComplex CComplex::sub(const CComplex & r) const {
	CComplex tmp(x - r.x, y - r.y);
	return tmp;

}

CComplex CComplex::multi(const CComplex & r) const {
	CComplex tmp;
	tmp = CComplex(x*r.y - y*r.x, x*r.y + y*r.x);
	return tmp;
}

CComplex CComplex::div(const CComplex & r) const {
	CComplex tmp;
	double d = r.x*r.x + r.y*r.y;
	tmp = multi(CComplex(r.x, -r.y));
	return CComplex(tmp.x / d, tmp.y / d);
}

CComplex CComplex:: operator+(const CComplex & b)const {
	return CComplex(x + b.x, y + b.y);
}
CComplex CComplex:: operator-(const CComplex & b)const {
	return CComplex(x - b.x, y - b.y);
}
CComplex CComplex:: operator*(const CComplex & r)const {
	return CComplex(x*r.y - y*r.x, x*r.y + y*r.x);
}
CComplex CComplex:: operator/(const CComplex & r)const {
	CComplex tmp;
	double d = r.x*r.x + r.y*r.y;
	tmp = multi(CComplex(r.x, -r.y));
	return CComplex(tmp.x / d, tmp.y / d);
}
CComplex CComplex:: operator~()const {
	return CComplex(x, -y);
}




-------------------------------------------------------#pragma once
#ifndef _COMPLEX_H
#define _COMPLEX_H

class CComplex {
private:
	double x, y;

public:
	CComplex(double = 0, double = 0);
	~CComplex();
	int setX(double = 0);
	int setY(double = 0);
	double getX() const;
	double getY() const;
	int print() const;
	int read();
	CComplex add(const CComplex &) const;
	CComplex sub(const CComplex &) const;
	CComplex multi(const CComplex &) const;
	CComplex div(const CComplex &) const;
	CComplex operator+(const CComplex &)const;
	CComplex operator-(const CComplex &)const;
	CComplex operator*(const CComplex &)const;
	CComplex operator/(const CComplex &)const;
	CComplex operator~()const;
};

#endif



---------------------------------------
/ ConsoleApplication1.cpp : Defines the entry point for the console application.
//

// ConsoleApplication1.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include "CComplex.h"
using namespace std;

int main() {
	CComplex a(1, 3), b(4, 3);
	cout << "a+b = ";
	(a.add(b)).print();
	cout << endl;
	(a + b).print();
	cout << endl;
	cout << "a-b = ";
	(a.sub(b)).print();
	cout << endl;
	(a - b).print();
	cout << endl;
	cout << "a*b = ";
	(a.multi(b)).print();
	cout << endl;
	(a*b).print();
	cout << endl;
	cout << "a/b = ";
	(a.div(b)).print();
	cout << endl;
	(a / b).print();
	cout << endl;
	(~a).print();
	return 0;
}

eturn 0;
}

